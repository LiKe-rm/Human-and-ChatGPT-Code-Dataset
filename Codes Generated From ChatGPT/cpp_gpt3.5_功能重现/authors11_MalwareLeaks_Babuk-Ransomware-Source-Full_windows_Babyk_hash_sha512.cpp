#include <iostream>
#include <iomanip>
#include <sstream>
#include <cstdint>
#include <cstring>

// 定义常量
constexpr uint64_t K[80] = {
	0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc,
	0x3956c25bf348b538, 0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118,
	0xd807aa98a3030242, 0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,
	0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 0xc19bf174cf692694,
	0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
	0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,
	0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4,
	0xc6e00bf33da88fc2, 0xd5a79147930aa725, 0x06ca6351e003826f, 0x142929670a0e6e70,
	0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,
	0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
	0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30,
	0xd192e819d6ef5218, 0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,
	0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8,
	0x391c0cb3c5c95a63, 0x4ed8aa4ae3418d01, 0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3, 
	0x748f82ee5defb2fc,	0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
	0x90befffa23631e28,	0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b,
	0xca273eceea26619c,	0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178,
	0x06f067aa72176fba,	0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b, 
	0x28db77f523047d84,	0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 0x431d67c49c100d4c, 
	0x4cc5d4becb3e42b6,	0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817 };

// 定义基本操作宏
#define ROTR(x, n) (((x) >> (n)) | ((x) << (64 - (n))))
#define SHR(x, n) ((x) >> (n))
#define CH(x, y, z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x, y, z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define SIGMA0(x) (ROTR(x, 28) ^ ROTR(x, 34) ^ ROTR(x, 39))
#define SIGMA1(x) (ROTR(x, 14) ^ ROTR(x, 18) ^ ROTR(x, 41))
#define OMEGA0(x) (ROTR(x, 1) ^ ROTR(x, 8) ^ SHR(x, 7))
#define OMEGA1(x) (ROTR(x, 19) ^ ROTR(x, 61) ^ SHR(x, 6))

class SHA512 {
public:
	SHA512();
	void update(const uint8_t* data, size_t len);
	std::string final();

private:
	void process_block(const uint8_t* data);
	uint64_t H[8];
	uint64_t length;
	uint8_t buffer[128];
	size_t buffer_length;
};

SHA512::SHA512() {
	H[0] = 0x6a09e667f3bcc908;
	H[1] = 0xbb67ae8584caa73b;
	H[2] = 0x3c6ef372fe94f82b;
	H[3] = 0xa54ff53a5f1d36f1;
	H[4] = 0x510e527fade682d1;
	H[5] = 0x9b05688c2b3e6c1fd;
	H[6] = 0x1f83d9abfb41bd6b;
	H[7] = 0x5be0cd19137e2179;
	length = 0;
	buffer_length = 0;
}

void SHA512::update(const uint8_t* data, size_t len) {
	while (len > 0) {
		size_t remaining = 128 - buffer_length;
		size_t to_copy = (len < remaining) ? len : remaining;
		memcpy(buffer + buffer_length, data, to_copy);
		data += to_copy;
		len -= to_copy;
		buffer_length += to_copy;
		if (buffer_length == 128) {
			process_block(buffer);
			buffer_length = 0;
		}
	}
}

std::string SHA512::final() {
	uint64_t total_length = length + 8 * buffer_length;
	buffer[buffer_length++] = 0x80;
	if (buffer_length > 112) {
		memset(buffer + buffer_length, 0, 128 - buffer_length);
		process_block(buffer);
		buffer_length = 0;
	}

	memset(buffer + buffer_length, 0, 120 - buffer_length);
	for (int i = 0; i < 8; ++i) {
		buffer[120 + i] = (total_length >> (56 - 8 * i)) & 0xFF;
	}

	process_block(buffer);

	std::stringstream ss;
	for (int i = 0; i < 8; ++i) {
		ss << std::hex << std::setw(16) << std::setfill('0') << H[i];
	}

	return ss.str();
}

void SHA512::process_block(const uint8_t* data) {
	uint64_t W[80];
	for (int i = 0; i < 16; ++i) {
		W[i] = ((uint64_t)data[8 * i] << 56) | ((uint64_t)data[8 * i + 1] << 48) |
			((uint64_t)data[8 * i + 2] << 40) | ((uint64_t)data[8 * i + 3] << 32) |
			((uint64_t)data[8 * i + 4] << 24) | ((uint64_t)data[8 * i + 5] << 16) |
			((uint64_t)data[8 * i + 6] << 8) | (uint64_t)data[8 * i + 7];
	}
	for (int i = 16; i < 80; ++i) {
		W[i] = OMEGA1(W[i - 2]) + W[i - 7] + OMEGA0(W[i - 15]) + W[i - 16];
	}

	uint64_t a = H[0];
	uint64_t b = H[1];
	uint64_t c = H[2];
	uint64_t d = H[3];
	uint64_t e = H[4];
	uint64_t f = H[5];
	uint64_t g = H[6];
	uint64_t h = H[7];

	for (int i = 0; i < 80; ++i) {
		uint64_t T1 = h + SIGMA1(e) + CH(e, f, g) + K[i] + W[i];
		uint64_t T2 = SIGMA0(a) + MAJ(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;
	}

	H[0] += a;
	H[1] += b;
	H[2] += c;
	H[3] += d;
	H[4] += e;
	H[5] += f;
	H[6] += g;
	H[7] += h;

	length += 1024;
}

std::string sha512(const std::string& input) {
	SHA512 hasher;
	hasher.update(reinterpret_cast<const uint8_t*>(input.data()), input.size());
	return hasher.final();
}

int main() {
	std::string input;
	std::cout << "Enter the input string: ";
	std::getline(std::cin, input);
	std::string hash = sha512(input);
	std::cout << "SHA-512 hash: " << hash << std::endl;

	return 0;
}
