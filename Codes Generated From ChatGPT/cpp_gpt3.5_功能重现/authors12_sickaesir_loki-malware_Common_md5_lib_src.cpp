#include <iostream>
#include <iomanip>
#include <cstring>
#include <cstdint>

class MD5 {
public:
    MD5();
    void update(const uint8_t *message, size_t length);
    void finalize();
    const uint8_t* digest() const;

private:
    void process_block(const uint8_t block[64]);
    uint32_t F(uint32_t x, uint32_t y, uint32_t z);
    uint32_t G(uint32_t x, uint32_t y, uint32_t z);
    uint32_t H(uint32_t x, uint32_t y, uint32_t z);
    uint32_t I(uint32_t x, uint32_t y, uint32_t z);
    uint32_t rotate_left(uint32_t x, int n);

    uint32_t _state[4];
    uint64_t _bitcount;
    uint8_t _buffer[64];
    uint8_t _digest[16];
    bool _finalized;
};

MD5::MD5() : _bitcount(0), _finalized(false) {
    _state[0] = 0x67452301;
    _state[1] = 0xEFCDAB89;
    _state[2] = 0x98BADCFE;
    _state[3] = 0x10325476;
}

void MD5::update(const uint8_t *message, size_t length) {
    if (_finalized) {
        std::cerr << "MD5 object is already finalized" << std::endl;
        return;
    }

    size_t buffer_index = _bitcount / 8 % 64;

    _bitcount += static_cast<uint64_t>(length) * 8;

    size_t buffer_space = 64 - buffer_index;
    size_t input_index = 0;

    if (length >= buffer_space) {
        memcpy(_buffer + buffer_index, message, buffer_space);
        process_block(_buffer);

        input_index = buffer_space;

        while (length - input_index >= 64) {
            process_block(message + input_index);
            input_index += 64;
        }
    }

    memcpy(_buffer + buffer_index, message + input_index, length - input_index);
}

void MD5::finalize() {
    if (_finalized) return;

    uint8_t padding[64] = {0x80};
    size_t index = _bitcount / 8 % 64;
    size_t padlen = (index < 56) ? (56 - index) : (120 - index);

    update(padding, padlen);
    update(reinterpret_cast<const uint8_t *>(&_bitcount), 8);

    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            _digest[i * 4 + j] = _state[i] >> (j * 8);

    _finalized = true;
}

const uint8_t* MD5::digest() const {
    if (!_finalized) {
        std::cerr << "MD5 object is not finalized" << std::endl;
        return nullptr;
    }
    return _digest;
}

void MD5::process_block(const uint8_t block[64]) {
    static const uint32_t K[64] = {
        0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
        0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
        0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
        0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
        0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
        0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
        0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
        0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
        0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
        0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
        0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
        0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
        0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
        0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
    };

    static const uint32_t S[64] = {
        7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
        5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
        4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
        6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21
    };

    uint32_t a = _state[0];
    uint32_t b = _state[1];
    uint32_t c = _state[2];
    uint32_t d = _state[3]; 

    uint32_t X[16];
    for (int i = 0; i < 16; ++i)
        X[i] = (block[i * 4]) | (block[i * 4 + 1] << 8) | (block[i * 4 + 2] << 16) | (block[i * 4 + 3] << 24);

    for (int i = 0; i < 64; ++i) {
        uint32_t f, g;
        if (i < 16) {
            f = F(b, c, d);
            g = i;
        } else if (i < 32) {
            f = G(b, c, d);
            g = (5 * i + 1) % 16;
        } else if (i < 48) {
            f = H(b, c, d);
            g = (3 * i + 5) % 16;
        } else {
            f = I(b, c, d);
            g = (7 * i) % 16;
        }

        uint32_t temp = d;
        d = c;
        c = b;
        b = b + rotate_left(a + f + K[i] + X[g], S[i]);
        a = temp;
    }

    _state[0] += a;
    _state[1] += b;
    _state[2] += c;
    _state[3] += d;
}

uint32_t MD5::F(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) | (~x & z);
}

uint32_t MD5::G(uint32_t x, uint32_t y, uint32_t z) {
    return (x & z) | (y & ~z);
}

uint32_t MD5::H(uint32_t x, uint32_t y, uint32_t z) {
    return x ^ y ^ z;
}

uint32_t MD5::I(uint32_t x, uint32_t y, uint32_t z) {
    return y ^ (x | ~z);
}

uint32_t MD5::rotate_left(uint32_t x, int n) {
    return (x << n) | (x >> (32 - n));
}