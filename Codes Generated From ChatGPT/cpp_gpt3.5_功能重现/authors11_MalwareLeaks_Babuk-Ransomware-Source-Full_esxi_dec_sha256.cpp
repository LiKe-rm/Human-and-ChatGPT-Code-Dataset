#include <iostream>
#include <cstring>
#include <cstdint>

#define SELF_TEST

class SHA256
{
public:
	SHA256() { sha256_init(); }
	void update(const uint8_t* data, size_t len) { sha256_hash(data, len); }
	void final(uint8_t* digest) { sha256_done(digest); }

private:
	void sha256_init();
	void sha256_hash(const uint8_t* data, size_t len);
	void sha256_done(uint8_t* digest);

	void sha256_process(const uint8_t data[64]);
	uint32_t rotr(uint32_t x, uint32_t n);
	uint32_t ch(uint32_t x, uint32_t y, uint32_t z);
	uint32_t maj(uint32_t x, uint32_t y, uint32_t z);
	uint32_t sigma0(uint32_t x);
	uint32_t sigma1(uint32_t x);
	uint32_t gamma0(uint32_t x);
	uint32_t gamma1(uint32_t x);

	uint64_t length;
	uint32_t state[8], curlen;
	uint8_t buf[64];
};

void SHA256::sha256_init()
{
	length = 0;
	curlen = 0;
	state[0] = 0x6A09E667;
	state[1] = 0xBB67AE85;
	state[2] = 0x3C6EF372;
	state[3] = 0xA54FF53A;
	state[4] = 0x510E527F;
	state[5] = 0x9B05688C;
	state[6] = 0x1F83D9AB;
	state[7] = 0x5BE0CD19;
}

void SHA256::sha256_hash(const uint8_t* data, size_t len)
{
	while (len--)
	{
		buf[curlen++] = *data++;
		if (curlen == 64)
		{
			sha256_process(buf);
			length += 512;
			curlen = 0;
		}
	}
}

void SHA256::sha256_done(uint8_t* digest)
{
	length += curlen << 3;
	buf[curlen++] = 0x80;
	if (curlen > 56)
	{
		while (curlen < 64)
			buf[curlen++] = 0;
		sha256_process(buf);
		curlen = 0;
	}
	while (curlen < 56)
		buf[curlen++] = 0;

	for (int i = 0; i < 8; i++)
		buf[curlen++] = (length >> (56 - (i << 3))) & 0xFF;
	sha256_process(buf);

	for (size_t i = 0; i < 8; i++)
	{
		uint32_t s = state[i];
		*digest++ = s >> 24;
		*digest++ = s >> 16;
		*digest++ = s >> 8;
		*digest++ = s;
	}
}

void SHA256::sha256_process(const uint8_t data[64])
{
	uint32_t w[64], a, b, c, d, e, f, g, h, t1, t2;

	for (size_t i = 0; i < 16; i++)
		w[i] = (data[i * 4] << 24) | (data[i * 4 + 1] << 16
			| (data[i * 4 + 2] << 8) | (data[i * 4 + 3]);

	for (size_t i = 16; i < 64; i++)
		w[i] = gamma1(w[i - 2]) + w[i - 7] + gamma0(w[i - 15]) + w[i - 16];

	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];
	e = state[4];
	f = state[5];
	g = state[6];
	h = state[7];

	static const uint32_t k[] = {
		0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
		0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
		0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
		0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
		0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
		0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
		0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
		0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 };

	for (size_t i = 0; i < 64; i++)
	{
		t1 = h + sigma1(e) + ch(e, f, g) + k[i] + w[i];
		t2 = sigma0(a) + maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + t1;
		d = c;
		c = b;
		b = a;
		a = t1 + t2;
	}

	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
	state[4] += e;
	state[5] += f;
	state[6] += g;
	state[7] += h;
}

uint32_t SHA256::rotr(uint32_t x, uint32_t n)
{
	return (x >> n) | (x << (32 - n));
}

uint32_t SHA256::ch(uint32_t x, uint32_t y, uint32_t z)
{
	return (x & y) ^ (~x & z);
}

uint32_t SHA256::maj(uint32_t x, uint32_t y, uint32_t z)
{
	return (x & y) ^ (x & z) ^ (y & z);
}

uint32_t SHA256::sigma0(uint32_t x)
{
	return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
}

uint32_t SHA256::sigma1(uint32_t x)
{
	return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
}

uint32_t SHA256::gamma0(uint32_t x)
{
	return rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3);
}

uint32_t SHA256::gamma1(uint32_t x)
{
	return rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10);
}

#ifdef SELF_TEST

bool sha256_self_test()
{
	struct test_vector_t
	{
		const char* input;
		const uint8_t digest[32];
	};

	static const test_vector_t test_vectors[] = {
		{"",
		 {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8,
		  0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
		  0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}},
		{"abc",
		 {0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde,
		  0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
		  0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad         }},
		{"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		 {0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93,
		  0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67,
		  0x02, 0x6c, 0x61, 0xbb, 0x3d, 0xab, 0xa9, 0x14}},
		{"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		 {0xcf, 0x53, 0x0e, 0x1d, 0x6e, 0xe2, 0x34, 0x71, 0xb6, 0x22, 0x7e, 0x92,
		  0x0a, 0x88, 0x77, 0x22, 0x68, 0x2a, 0x5c, 0x15, 0x83, 0x94, 0x6c, 0xdb,
		  0xf8, 0x6e, 0x37, 0x13, 0x7e, 0x54, 0xf1, 0x57}},
	};

	for (const auto& tv : test_vectors)
	{
		SHA256 sha256;
		uint8_t digest[32];
		sha256.update(reinterpret_cast<const uint8_t*>(tv.input), std::strlen(tv.input));
		sha256.final(digest);
		if (memcmp(digest, tv.digest, sizeof(digest)) != 0)
		{
			std::cerr << "SHA-256 self-test failed!" << std::endl;
			return false;
		}
	}
	std::cout << "SHA-256 self-test passed." << std::endl;
	return true;
}

#endif

int main()
{
#ifdef SELF_TEST
	if (!sha256_self_test())
		return 1;
#endif
	return 0;
}


