#include <iostream>
#include <sstream>
#include <string>
#include <iomanip>
#include <cstdint>
#include <cstring>

class SHA256 {
public:
    void init();
    void update(const uint8_t* data, size_t len);
    void finalize(uint8_t hash[32]);

private:
    uint32_t m_data[16];
    uint32_t m_hash[8];
    uint32_t m_length;
    uint32_t m_totalLength;

    void process(const uint8_t data[64]);

    static uint32_t rotateRight(uint32_t value, unsigned int count);
    static uint32_t choose(uint32_t x, uint32_t y, uint32_t z);
    static uint32_t majority(uint32_t x, uint32_t y, uint32_t z);
    static uint32_t sigma0(uint32_t x);
    static uint32_t sigma1(uint32_t x);
    static uint32_t delta0(uint32_t x);
    static uint32_t delta1(uint32_t x);
};

void SHA256::init() {
    m_hash[0] = 0x6a09e667;
    m_hash[1] = 0xbb67ae85;
    m_hash[2] = 0x3c6ef372;
    m_hash[3] = 0xa54ff53a;
    m_hash[4] = 0x510e527f;
    m_hash[5] = 0x9b05688c;
    m_hash[6] = 0x1f83d9ab;
    m_hash[7] = 0x5be0cd19;
    m_length = 0;
    m_totalLength = 0;
}

void SHA256::update(const uint8_t* data, size_t len) {
    for (size_t i = 0; i < len; ++i) {
        m_data[m_length++] = data[i];
        if (m_length == 64) {
            process(m_data);
            m_totalLength += 512;
            m_length = 0;
        }
    }
}

void SHA256::finalize(uint8_t hash[32]) {
    m_totalLength += m_length * 8;
    m_data[m_length++] = 0x80;
    if (m_length > 56) {
        while (m_length < 64) {
            m_data[m_length++] = 0;
        }
        process(m_data);
        m_length = 0;
    }
    while (m_length < 56) {
        m_data[m_length++] = 0;
    }
    *((uint64_t*)(m_data + 56)) = m_totalLength;
    process(m_data);

    for (int i = 0; i < 8; ++i) {
        hash[i * 4] = m_hash[i] >> 24;
        hash[i * 4 + 1] = m_hash[i] >> 16;
        hash[i * 4 + 2] = m_hash[i] >> 8;
        hash[i * 4 + 3] = m_hash[i];
    }
}

void SHA256::process(const uint8_t data[64]) {
    uint32_t a, b, c, d, e, f, g, h, t1, t2, w[64];
    const uint32_t k[64] = {
        0x428a2f98,         0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4,
        0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74,
        0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6,
        0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
        0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351,
        0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354,
        0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70,
        0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116,
        0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
        0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa,
        0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    for (int i = 0; i < 16; ++i) {
        w[i] = (data[i * 4] << 24) | (data[i * 4 + 1] << 16) | (data[i * 4 + 2] << 8) | data[i * 4 + 3];
    }
    for (int i = 16; i < 64; ++i) {
        w[i] = delta1(w[i - 2]) + w[i - 7] + delta0(w[i - 15]) + w[i - 16];
    }

    a = m_hash[0];
    b = m_hash[1];
    c = m_hash[2];
    d = m_hash[3];
    e = m_hash[4];
    f = m_hash[5];
    g = m_hash[6];
    h = m_hash[7];

    for (int i = 0; i < 64; ++i) {
        t1 = h + sigma1(e) + choose(e, f, g) + k[i] + w[i];
        t2 = sigma0(a) + majority(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    m_hash[0] += a;
    m_hash[1] += b;
    m_hash[2] += c;
    m_hash[3] += d;
    m_hash[4] += e;
    m_hash[5] += f;
    m_hash[6] += g;
    m_hash[7] += h;
}

uint32_t SHA256::rotateRight(uint32_t value, unsigned int count) {
    return (value >> count) | (value << (32 - count));
}

uint32_t SHA256::choose(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (~x & z);
}

uint32_t SHA256::majority(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (x & z) ^ (y & z);
}

uint32_t SHA256::sigma0(uint32_t x) {
    return rotateRight(x, 2) ^ rotateRight(x, 13) ^ rotateRight(x, 22);
}

uint32_t SHA256::sigma1(uint32_t x) {
    return rotateRight(x, 6) ^ rotateRight(x, 11) ^ rotateRight(x, 25);
}

uint32_t SHA256::delta0(uint32_t x) {
    return rotateRight(x, 7) ^ rotateRight(x, 18) ^ (x >> 3);
}

uint32_t SHA256::delta1(uint32_t x) {
    return rotateRight(x, 17) ^ rotateRight(x, 19) ^ (x >> 10);
}

std::string bytesToHexString(const uint8_t* data, size_t len) {
    std::stringstream ss;
    ss << std::hex << std::setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << std::setw(2) << static_cast<unsigned>(data[i]);
    }
    return ss.str();
}

int main() {
    // Test vector from https://tools.ietf.org/html/rfc6234#section-8.3
    const char* testData = "abc";
    uint8_t expectedHash[32] = {
        0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
        0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad
    };

    SHA256 sha256;
    sha256.init();
    sha256.update(reinterpret_cast<const uint8_t*>(testData), std::strlen(testData));
    uint8_t hash[32];
    sha256.finalize(hash);
    std::string hashString = bytesToHexString(hash, 32);

    std::cout << "Test data: " << testData << std::endl;
    std::cout << "Expected hash: " << bytesToHexString(expectedHash, 32) << std::endl;
    std::cout << "Computed hash: " << hashString << std::endl;

    if (hashString == bytesToHexString(expectedHash, 32)) {
        std::cout << "Self-test passed!" << std::endl;
    } else {
        std::cout << "Self-test failed!" << std::endl;
    }

    return 0;
}



